// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cura.proto

#ifndef PROTOBUF_Cura_2eproto__INCLUDED
#define PROTOBUF_Cura_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace Cura {
class GCodeLayer;
class GCodeLayerDefaultTypeInternal;
extern GCodeLayerDefaultTypeInternal _GCodeLayer_default_instance_;
class GCodePrefix;
class GCodePrefixDefaultTypeInternal;
extern GCodePrefixDefaultTypeInternal _GCodePrefix_default_instance_;
class Layer;
class LayerDefaultTypeInternal;
extern LayerDefaultTypeInternal _Layer_default_instance_;
class Object;
class ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class ObjectList;
class ObjectListDefaultTypeInternal;
extern ObjectListDefaultTypeInternal _ObjectList_default_instance_;
class ObjectPrintTime;
class ObjectPrintTimeDefaultTypeInternal;
extern ObjectPrintTimeDefaultTypeInternal _ObjectPrintTime_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Progress;
class ProgressDefaultTypeInternal;
extern ProgressDefaultTypeInternal _Progress_default_instance_;
class Setting;
class SettingDefaultTypeInternal;
extern SettingDefaultTypeInternal _Setting_default_instance_;
class SettingList;
class SettingListDefaultTypeInternal;
extern SettingListDefaultTypeInternal _SettingList_default_instance_;
class SlicedObject;
class SlicedObjectDefaultTypeInternal;
extern SlicedObjectDefaultTypeInternal _SlicedObject_default_instance_;
class SlicedObjectList;
class SlicedObjectListDefaultTypeInternal;
extern SlicedObjectListDefaultTypeInternal _SlicedObjectList_default_instance_;
}  // namespace Cura

namespace Cura {

namespace protobuf_Cura_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Cura_2eproto

enum Polygon_Type {
  Polygon_Type_NoneType = 0,
  Polygon_Type_Inset0Type = 1,
  Polygon_Type_InsetXType = 2,
  Polygon_Type_SkinType = 3,
  Polygon_Type_SupportType = 4,
  Polygon_Type_SkirtType = 5,
  Polygon_Type_Polygon_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Polygon_Type_Polygon_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Polygon_Type_IsValid(int value);
const Polygon_Type Polygon_Type_Type_MIN = Polygon_Type_NoneType;
const Polygon_Type Polygon_Type_Type_MAX = Polygon_Type_SkirtType;
const int Polygon_Type_Type_ARRAYSIZE = Polygon_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Polygon_Type_descriptor();
inline const ::std::string& Polygon_Type_Name(Polygon_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Polygon_Type_descriptor(), value);
}
inline bool Polygon_Type_Parse(
    const ::std::string& name, Polygon_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Polygon_Type>(
    Polygon_Type_descriptor(), name, value);
}
// ===================================================================

class ObjectList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Cura.ObjectList) */ {
 public:
  ObjectList();
  virtual ~ObjectList();

  ObjectList(const ObjectList& from);

  inline ObjectList& operator=(const ObjectList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectList(ObjectList&& from) noexcept
    : ObjectList() {
    *this = ::std::move(from);
  }

  inline ObjectList& operator=(ObjectList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectList& default_instance();

  static inline const ObjectList* internal_default_instance() {
    return reinterpret_cast<const ObjectList*>(
               &_ObjectList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ObjectList* other);
  friend void swap(ObjectList& a, ObjectList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectList* New() const PROTOBUF_FINAL { return New(NULL); }

  ObjectList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ObjectList& from);
  void MergeFrom(const ObjectList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ObjectList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cura.Object objects = 1;
  int objects_size() const;
  void clear_objects();
  static const int kObjectsFieldNumber = 1;
  const ::Cura::Object& objects(int index) const;
  ::Cura::Object* mutable_objects(int index);
  ::Cura::Object* add_objects();
  ::google::protobuf::RepeatedPtrField< ::Cura::Object >*
      mutable_objects();
  const ::google::protobuf::RepeatedPtrField< ::Cura::Object >&
      objects() const;

  // @@protoc_insertion_point(class_scope:Cura.ObjectList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Cura::Object > objects_;
  mutable int _cached_size_;
  friend struct protobuf_Cura_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Object : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Cura.Object) */ {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(Object&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Object& default_instance();

  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Object* other);
  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Object* New() const PROTOBUF_FINAL { return New(NULL); }

  Object* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Object* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cura.Setting settings = 5;
  int settings_size() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 5;
  const ::Cura::Setting& settings(int index) const;
  ::Cura::Setting* mutable_settings(int index);
  ::Cura::Setting* add_settings();
  ::google::protobuf::RepeatedPtrField< ::Cura::Setting >*
      mutable_settings();
  const ::google::protobuf::RepeatedPtrField< ::Cura::Setting >&
      settings() const;

  // bytes vertices = 2;
  void clear_vertices();
  static const int kVerticesFieldNumber = 2;
  const ::std::string& vertices() const;
  void set_vertices(const ::std::string& value);
  #if LANG_CXX11
  void set_vertices(::std::string&& value);
  #endif
  void set_vertices(const char* value);
  void set_vertices(const void* value, size_t size);
  ::std::string* mutable_vertices();
  ::std::string* release_vertices();
  void set_allocated_vertices(::std::string* vertices);

  // bytes normals = 3;
  void clear_normals();
  static const int kNormalsFieldNumber = 3;
  const ::std::string& normals() const;
  void set_normals(const ::std::string& value);
  #if LANG_CXX11
  void set_normals(::std::string&& value);
  #endif
  void set_normals(const char* value);
  void set_normals(const void* value, size_t size);
  ::std::string* mutable_normals();
  ::std::string* release_normals();
  void set_allocated_normals(::std::string* normals);

  // bytes indices = 4;
  void clear_indices();
  static const int kIndicesFieldNumber = 4;
  const ::std::string& indices() const;
  void set_indices(const ::std::string& value);
  #if LANG_CXX11
  void set_indices(::std::string&& value);
  #endif
  void set_indices(const char* value);
  void set_indices(const void* value, size_t size);
  ::std::string* mutable_indices();
  ::std::string* release_indices();
  void set_allocated_indices(::std::string* indices);

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Cura.Object)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Cura::Setting > settings_;
  ::google::protobuf::internal::ArenaStringPtr vertices_;
  ::google::protobuf::internal::ArenaStringPtr normals_;
  ::google::protobuf::internal::ArenaStringPtr indices_;
  ::google::protobuf::int64 id_;
  mutable int _cached_size_;
  friend struct protobuf_Cura_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Progress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Cura.Progress) */ {
 public:
  Progress();
  virtual ~Progress();

  Progress(const Progress& from);

  inline Progress& operator=(const Progress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Progress(Progress&& from) noexcept
    : Progress() {
    *this = ::std::move(from);
  }

  inline Progress& operator=(Progress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Progress& default_instance();

  static inline const Progress* internal_default_instance() {
    return reinterpret_cast<const Progress*>(
               &_Progress_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Progress* other);
  friend void swap(Progress& a, Progress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Progress* New() const PROTOBUF_FINAL { return New(NULL); }

  Progress* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Progress& from);
  void MergeFrom(const Progress& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Progress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float amount = 1;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  float amount() const;
  void set_amount(float value);

  // @@protoc_insertion_point(class_scope:Cura.Progress)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float amount_;
  mutable int _cached_size_;
  friend struct protobuf_Cura_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SlicedObjectList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Cura.SlicedObjectList) */ {
 public:
  SlicedObjectList();
  virtual ~SlicedObjectList();

  SlicedObjectList(const SlicedObjectList& from);

  inline SlicedObjectList& operator=(const SlicedObjectList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SlicedObjectList(SlicedObjectList&& from) noexcept
    : SlicedObjectList() {
    *this = ::std::move(from);
  }

  inline SlicedObjectList& operator=(SlicedObjectList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SlicedObjectList& default_instance();

  static inline const SlicedObjectList* internal_default_instance() {
    return reinterpret_cast<const SlicedObjectList*>(
               &_SlicedObjectList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SlicedObjectList* other);
  friend void swap(SlicedObjectList& a, SlicedObjectList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SlicedObjectList* New() const PROTOBUF_FINAL { return New(NULL); }

  SlicedObjectList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SlicedObjectList& from);
  void MergeFrom(const SlicedObjectList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SlicedObjectList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cura.SlicedObject objects = 1;
  int objects_size() const;
  void clear_objects();
  static const int kObjectsFieldNumber = 1;
  const ::Cura::SlicedObject& objects(int index) const;
  ::Cura::SlicedObject* mutable_objects(int index);
  ::Cura::SlicedObject* add_objects();
  ::google::protobuf::RepeatedPtrField< ::Cura::SlicedObject >*
      mutable_objects();
  const ::google::protobuf::RepeatedPtrField< ::Cura::SlicedObject >&
      objects() const;

  // @@protoc_insertion_point(class_scope:Cura.SlicedObjectList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Cura::SlicedObject > objects_;
  mutable int _cached_size_;
  friend struct protobuf_Cura_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SlicedObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Cura.SlicedObject) */ {
 public:
  SlicedObject();
  virtual ~SlicedObject();

  SlicedObject(const SlicedObject& from);

  inline SlicedObject& operator=(const SlicedObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SlicedObject(SlicedObject&& from) noexcept
    : SlicedObject() {
    *this = ::std::move(from);
  }

  inline SlicedObject& operator=(SlicedObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SlicedObject& default_instance();

  static inline const SlicedObject* internal_default_instance() {
    return reinterpret_cast<const SlicedObject*>(
               &_SlicedObject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SlicedObject* other);
  friend void swap(SlicedObject& a, SlicedObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SlicedObject* New() const PROTOBUF_FINAL { return New(NULL); }

  SlicedObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SlicedObject& from);
  void MergeFrom(const SlicedObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SlicedObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cura.Layer layers = 2;
  int layers_size() const;
  void clear_layers();
  static const int kLayersFieldNumber = 2;
  const ::Cura::Layer& layers(int index) const;
  ::Cura::Layer* mutable_layers(int index);
  ::Cura::Layer* add_layers();
  ::google::protobuf::RepeatedPtrField< ::Cura::Layer >*
      mutable_layers();
  const ::google::protobuf::RepeatedPtrField< ::Cura::Layer >&
      layers() const;

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Cura.SlicedObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Cura::Layer > layers_;
  ::google::protobuf::int64 id_;
  mutable int _cached_size_;
  friend struct protobuf_Cura_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Layer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Cura.Layer) */ {
 public:
  Layer();
  virtual ~Layer();

  Layer(const Layer& from);

  inline Layer& operator=(const Layer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Layer(Layer&& from) noexcept
    : Layer() {
    *this = ::std::move(from);
  }

  inline Layer& operator=(Layer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Layer& default_instance();

  static inline const Layer* internal_default_instance() {
    return reinterpret_cast<const Layer*>(
               &_Layer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Layer* other);
  friend void swap(Layer& a, Layer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Layer* New() const PROTOBUF_FINAL { return New(NULL); }

  Layer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Layer& from);
  void MergeFrom(const Layer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Layer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cura.Polygon polygons = 2;
  int polygons_size() const;
  void clear_polygons();
  static const int kPolygonsFieldNumber = 2;
  const ::Cura::Polygon& polygons(int index) const;
  ::Cura::Polygon* mutable_polygons(int index);
  ::Cura::Polygon* add_polygons();
  ::google::protobuf::RepeatedPtrField< ::Cura::Polygon >*
      mutable_polygons();
  const ::google::protobuf::RepeatedPtrField< ::Cura::Polygon >&
      polygons() const;

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Cura.Layer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Cura::Polygon > polygons_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct protobuf_Cura_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Polygon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Cura.Polygon) */ {
 public:
  Polygon();
  virtual ~Polygon();

  Polygon(const Polygon& from);

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(Polygon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Polygon& default_instance();

  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Polygon* other);
  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const PROTOBUF_FINAL { return New(NULL); }

  Polygon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Polygon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Polygon_Type Type;
  static const Type NoneType =
    Polygon_Type_NoneType;
  static const Type Inset0Type =
    Polygon_Type_Inset0Type;
  static const Type InsetXType =
    Polygon_Type_InsetXType;
  static const Type SkinType =
    Polygon_Type_SkinType;
  static const Type SupportType =
    Polygon_Type_SupportType;
  static const Type SkirtType =
    Polygon_Type_SkirtType;
  static inline bool Type_IsValid(int value) {
    return Polygon_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Polygon_Type_Type_MIN;
  static const Type Type_MAX =
    Polygon_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Polygon_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Polygon_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Polygon_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Polygon_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes points = 2;
  void clear_points();
  static const int kPointsFieldNumber = 2;
  const ::std::string& points() const;
  void set_points(const ::std::string& value);
  #if LANG_CXX11
  void set_points(::std::string&& value);
  #endif
  void set_points(const char* value);
  void set_points(const void* value, size_t size);
  ::std::string* mutable_points();
  ::std::string* release_points();
  void set_allocated_points(::std::string* points);

  // .Cura.Polygon.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Cura::Polygon_Type type() const;
  void set_type(::Cura::Polygon_Type value);

  // @@protoc_insertion_point(class_scope:Cura.Polygon)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr points_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_Cura_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCodeLayer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Cura.GCodeLayer) */ {
 public:
  GCodeLayer();
  virtual ~GCodeLayer();

  GCodeLayer(const GCodeLayer& from);

  inline GCodeLayer& operator=(const GCodeLayer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCodeLayer(GCodeLayer&& from) noexcept
    : GCodeLayer() {
    *this = ::std::move(from);
  }

  inline GCodeLayer& operator=(GCodeLayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCodeLayer& default_instance();

  static inline const GCodeLayer* internal_default_instance() {
    return reinterpret_cast<const GCodeLayer*>(
               &_GCodeLayer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(GCodeLayer* other);
  friend void swap(GCodeLayer& a, GCodeLayer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCodeLayer* New() const PROTOBUF_FINAL { return New(NULL); }

  GCodeLayer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCodeLayer& from);
  void MergeFrom(const GCodeLayer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCodeLayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Cura.GCodeLayer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int64 id_;
  mutable int _cached_size_;
  friend struct protobuf_Cura_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObjectPrintTime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Cura.ObjectPrintTime) */ {
 public:
  ObjectPrintTime();
  virtual ~ObjectPrintTime();

  ObjectPrintTime(const ObjectPrintTime& from);

  inline ObjectPrintTime& operator=(const ObjectPrintTime& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectPrintTime(ObjectPrintTime&& from) noexcept
    : ObjectPrintTime() {
    *this = ::std::move(from);
  }

  inline ObjectPrintTime& operator=(ObjectPrintTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectPrintTime& default_instance();

  static inline const ObjectPrintTime* internal_default_instance() {
    return reinterpret_cast<const ObjectPrintTime*>(
               &_ObjectPrintTime_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ObjectPrintTime* other);
  friend void swap(ObjectPrintTime& a, ObjectPrintTime& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectPrintTime* New() const PROTOBUF_FINAL { return New(NULL); }

  ObjectPrintTime* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ObjectPrintTime& from);
  void MergeFrom(const ObjectPrintTime& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ObjectPrintTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // float time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  float time() const;
  void set_time(float value);

  // float material_amount = 3;
  void clear_material_amount();
  static const int kMaterialAmountFieldNumber = 3;
  float material_amount() const;
  void set_material_amount(float value);

  // @@protoc_insertion_point(class_scope:Cura.ObjectPrintTime)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 id_;
  float time_;
  float material_amount_;
  mutable int _cached_size_;
  friend struct protobuf_Cura_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SettingList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Cura.SettingList) */ {
 public:
  SettingList();
  virtual ~SettingList();

  SettingList(const SettingList& from);

  inline SettingList& operator=(const SettingList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SettingList(SettingList&& from) noexcept
    : SettingList() {
    *this = ::std::move(from);
  }

  inline SettingList& operator=(SettingList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SettingList& default_instance();

  static inline const SettingList* internal_default_instance() {
    return reinterpret_cast<const SettingList*>(
               &_SettingList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(SettingList* other);
  friend void swap(SettingList& a, SettingList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SettingList* New() const PROTOBUF_FINAL { return New(NULL); }

  SettingList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SettingList& from);
  void MergeFrom(const SettingList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SettingList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cura.Setting settings = 1;
  int settings_size() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 1;
  const ::Cura::Setting& settings(int index) const;
  ::Cura::Setting* mutable_settings(int index);
  ::Cura::Setting* add_settings();
  ::google::protobuf::RepeatedPtrField< ::Cura::Setting >*
      mutable_settings();
  const ::google::protobuf::RepeatedPtrField< ::Cura::Setting >&
      settings() const;

  // @@protoc_insertion_point(class_scope:Cura.SettingList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Cura::Setting > settings_;
  mutable int _cached_size_;
  friend struct protobuf_Cura_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Setting : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Cura.Setting) */ {
 public:
  Setting();
  virtual ~Setting();

  Setting(const Setting& from);

  inline Setting& operator=(const Setting& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Setting(Setting&& from) noexcept
    : Setting() {
    *this = ::std::move(from);
  }

  inline Setting& operator=(Setting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Setting& default_instance();

  static inline const Setting* internal_default_instance() {
    return reinterpret_cast<const Setting*>(
               &_Setting_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Setting* other);
  friend void swap(Setting& a, Setting& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Setting* New() const PROTOBUF_FINAL { return New(NULL); }

  Setting* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Setting& from);
  void MergeFrom(const Setting& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Setting* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:Cura.Setting)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct protobuf_Cura_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCodePrefix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Cura.GCodePrefix) */ {
 public:
  GCodePrefix();
  virtual ~GCodePrefix();

  GCodePrefix(const GCodePrefix& from);

  inline GCodePrefix& operator=(const GCodePrefix& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCodePrefix(GCodePrefix&& from) noexcept
    : GCodePrefix() {
    *this = ::std::move(from);
  }

  inline GCodePrefix& operator=(GCodePrefix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCodePrefix& default_instance();

  static inline const GCodePrefix* internal_default_instance() {
    return reinterpret_cast<const GCodePrefix*>(
               &_GCodePrefix_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(GCodePrefix* other);
  friend void swap(GCodePrefix& a, GCodePrefix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCodePrefix* New() const PROTOBUF_FINAL { return New(NULL); }

  GCodePrefix* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCodePrefix& from);
  void MergeFrom(const GCodePrefix& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCodePrefix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Cura.GCodePrefix)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct protobuf_Cura_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObjectList

// repeated .Cura.Object objects = 1;
inline int ObjectList::objects_size() const {
  return objects_.size();
}
inline void ObjectList::clear_objects() {
  objects_.Clear();
}
inline const ::Cura::Object& ObjectList::objects(int index) const {
  // @@protoc_insertion_point(field_get:Cura.ObjectList.objects)
  return objects_.Get(index);
}
inline ::Cura::Object* ObjectList::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:Cura.ObjectList.objects)
  return objects_.Mutable(index);
}
inline ::Cura::Object* ObjectList::add_objects() {
  // @@protoc_insertion_point(field_add:Cura.ObjectList.objects)
  return objects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Cura::Object >*
ObjectList::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:Cura.ObjectList.objects)
  return &objects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Cura::Object >&
ObjectList::objects() const {
  // @@protoc_insertion_point(field_list:Cura.ObjectList.objects)
  return objects_;
}

// -------------------------------------------------------------------

// Object

// int64 id = 1;
inline void Object::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Object::id() const {
  // @@protoc_insertion_point(field_get:Cura.Object.id)
  return id_;
}
inline void Object::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Cura.Object.id)
}

// bytes vertices = 2;
inline void Object::clear_vertices() {
  vertices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Object::vertices() const {
  // @@protoc_insertion_point(field_get:Cura.Object.vertices)
  return vertices_.GetNoArena();
}
inline void Object::set_vertices(const ::std::string& value) {
  
  vertices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cura.Object.vertices)
}
#if LANG_CXX11
inline void Object::set_vertices(::std::string&& value) {
  
  vertices_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cura.Object.vertices)
}
#endif
inline void Object::set_vertices(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vertices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cura.Object.vertices)
}
inline void Object::set_vertices(const void* value, size_t size) {
  
  vertices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cura.Object.vertices)
}
inline ::std::string* Object::mutable_vertices() {
  
  // @@protoc_insertion_point(field_mutable:Cura.Object.vertices)
  return vertices_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_vertices() {
  // @@protoc_insertion_point(field_release:Cura.Object.vertices)
  
  return vertices_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_vertices(::std::string* vertices) {
  if (vertices != NULL) {
    
  } else {
    
  }
  vertices_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vertices);
  // @@protoc_insertion_point(field_set_allocated:Cura.Object.vertices)
}

// bytes normals = 3;
inline void Object::clear_normals() {
  normals_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Object::normals() const {
  // @@protoc_insertion_point(field_get:Cura.Object.normals)
  return normals_.GetNoArena();
}
inline void Object::set_normals(const ::std::string& value) {
  
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cura.Object.normals)
}
#if LANG_CXX11
inline void Object::set_normals(::std::string&& value) {
  
  normals_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cura.Object.normals)
}
#endif
inline void Object::set_normals(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cura.Object.normals)
}
inline void Object::set_normals(const void* value, size_t size) {
  
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cura.Object.normals)
}
inline ::std::string* Object::mutable_normals() {
  
  // @@protoc_insertion_point(field_mutable:Cura.Object.normals)
  return normals_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_normals() {
  // @@protoc_insertion_point(field_release:Cura.Object.normals)
  
  return normals_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_normals(::std::string* normals) {
  if (normals != NULL) {
    
  } else {
    
  }
  normals_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normals);
  // @@protoc_insertion_point(field_set_allocated:Cura.Object.normals)
}

// bytes indices = 4;
inline void Object::clear_indices() {
  indices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Object::indices() const {
  // @@protoc_insertion_point(field_get:Cura.Object.indices)
  return indices_.GetNoArena();
}
inline void Object::set_indices(const ::std::string& value) {
  
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cura.Object.indices)
}
#if LANG_CXX11
inline void Object::set_indices(::std::string&& value) {
  
  indices_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cura.Object.indices)
}
#endif
inline void Object::set_indices(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cura.Object.indices)
}
inline void Object::set_indices(const void* value, size_t size) {
  
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cura.Object.indices)
}
inline ::std::string* Object::mutable_indices() {
  
  // @@protoc_insertion_point(field_mutable:Cura.Object.indices)
  return indices_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_indices() {
  // @@protoc_insertion_point(field_release:Cura.Object.indices)
  
  return indices_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_indices(::std::string* indices) {
  if (indices != NULL) {
    
  } else {
    
  }
  indices_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), indices);
  // @@protoc_insertion_point(field_set_allocated:Cura.Object.indices)
}

// repeated .Cura.Setting settings = 5;
inline int Object::settings_size() const {
  return settings_.size();
}
inline void Object::clear_settings() {
  settings_.Clear();
}
inline const ::Cura::Setting& Object::settings(int index) const {
  // @@protoc_insertion_point(field_get:Cura.Object.settings)
  return settings_.Get(index);
}
inline ::Cura::Setting* Object::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:Cura.Object.settings)
  return settings_.Mutable(index);
}
inline ::Cura::Setting* Object::add_settings() {
  // @@protoc_insertion_point(field_add:Cura.Object.settings)
  return settings_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Cura::Setting >*
Object::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:Cura.Object.settings)
  return &settings_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Cura::Setting >&
Object::settings() const {
  // @@protoc_insertion_point(field_list:Cura.Object.settings)
  return settings_;
}

// -------------------------------------------------------------------

// Progress

// float amount = 1;
inline void Progress::clear_amount() {
  amount_ = 0;
}
inline float Progress::amount() const {
  // @@protoc_insertion_point(field_get:Cura.Progress.amount)
  return amount_;
}
inline void Progress::set_amount(float value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:Cura.Progress.amount)
}

// -------------------------------------------------------------------

// SlicedObjectList

// repeated .Cura.SlicedObject objects = 1;
inline int SlicedObjectList::objects_size() const {
  return objects_.size();
}
inline void SlicedObjectList::clear_objects() {
  objects_.Clear();
}
inline const ::Cura::SlicedObject& SlicedObjectList::objects(int index) const {
  // @@protoc_insertion_point(field_get:Cura.SlicedObjectList.objects)
  return objects_.Get(index);
}
inline ::Cura::SlicedObject* SlicedObjectList::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:Cura.SlicedObjectList.objects)
  return objects_.Mutable(index);
}
inline ::Cura::SlicedObject* SlicedObjectList::add_objects() {
  // @@protoc_insertion_point(field_add:Cura.SlicedObjectList.objects)
  return objects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Cura::SlicedObject >*
SlicedObjectList::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:Cura.SlicedObjectList.objects)
  return &objects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Cura::SlicedObject >&
SlicedObjectList::objects() const {
  // @@protoc_insertion_point(field_list:Cura.SlicedObjectList.objects)
  return objects_;
}

// -------------------------------------------------------------------

// SlicedObject

// int64 id = 1;
inline void SlicedObject::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SlicedObject::id() const {
  // @@protoc_insertion_point(field_get:Cura.SlicedObject.id)
  return id_;
}
inline void SlicedObject::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Cura.SlicedObject.id)
}

// repeated .Cura.Layer layers = 2;
inline int SlicedObject::layers_size() const {
  return layers_.size();
}
inline void SlicedObject::clear_layers() {
  layers_.Clear();
}
inline const ::Cura::Layer& SlicedObject::layers(int index) const {
  // @@protoc_insertion_point(field_get:Cura.SlicedObject.layers)
  return layers_.Get(index);
}
inline ::Cura::Layer* SlicedObject::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:Cura.SlicedObject.layers)
  return layers_.Mutable(index);
}
inline ::Cura::Layer* SlicedObject::add_layers() {
  // @@protoc_insertion_point(field_add:Cura.SlicedObject.layers)
  return layers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Cura::Layer >*
SlicedObject::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:Cura.SlicedObject.layers)
  return &layers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Cura::Layer >&
SlicedObject::layers() const {
  // @@protoc_insertion_point(field_list:Cura.SlicedObject.layers)
  return layers_;
}

// -------------------------------------------------------------------

// Layer

// int32 id = 1;
inline void Layer::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Layer::id() const {
  // @@protoc_insertion_point(field_get:Cura.Layer.id)
  return id_;
}
inline void Layer::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Cura.Layer.id)
}

// repeated .Cura.Polygon polygons = 2;
inline int Layer::polygons_size() const {
  return polygons_.size();
}
inline void Layer::clear_polygons() {
  polygons_.Clear();
}
inline const ::Cura::Polygon& Layer::polygons(int index) const {
  // @@protoc_insertion_point(field_get:Cura.Layer.polygons)
  return polygons_.Get(index);
}
inline ::Cura::Polygon* Layer::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:Cura.Layer.polygons)
  return polygons_.Mutable(index);
}
inline ::Cura::Polygon* Layer::add_polygons() {
  // @@protoc_insertion_point(field_add:Cura.Layer.polygons)
  return polygons_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Cura::Polygon >*
Layer::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:Cura.Layer.polygons)
  return &polygons_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Cura::Polygon >&
Layer::polygons() const {
  // @@protoc_insertion_point(field_list:Cura.Layer.polygons)
  return polygons_;
}

// -------------------------------------------------------------------

// Polygon

// .Cura.Polygon.Type type = 1;
inline void Polygon::clear_type() {
  type_ = 0;
}
inline ::Cura::Polygon_Type Polygon::type() const {
  // @@protoc_insertion_point(field_get:Cura.Polygon.type)
  return static_cast< ::Cura::Polygon_Type >(type_);
}
inline void Polygon::set_type(::Cura::Polygon_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Cura.Polygon.type)
}

// bytes points = 2;
inline void Polygon::clear_points() {
  points_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Polygon::points() const {
  // @@protoc_insertion_point(field_get:Cura.Polygon.points)
  return points_.GetNoArena();
}
inline void Polygon::set_points(const ::std::string& value) {
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cura.Polygon.points)
}
#if LANG_CXX11
inline void Polygon::set_points(::std::string&& value) {
  
  points_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cura.Polygon.points)
}
#endif
inline void Polygon::set_points(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cura.Polygon.points)
}
inline void Polygon::set_points(const void* value, size_t size) {
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cura.Polygon.points)
}
inline ::std::string* Polygon::mutable_points() {
  
  // @@protoc_insertion_point(field_mutable:Cura.Polygon.points)
  return points_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Polygon::release_points() {
  // @@protoc_insertion_point(field_release:Cura.Polygon.points)
  
  return points_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Polygon::set_allocated_points(::std::string* points) {
  if (points != NULL) {
    
  } else {
    
  }
  points_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), points);
  // @@protoc_insertion_point(field_set_allocated:Cura.Polygon.points)
}

// -------------------------------------------------------------------

// GCodeLayer

// int64 id = 1;
inline void GCodeLayer::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GCodeLayer::id() const {
  // @@protoc_insertion_point(field_get:Cura.GCodeLayer.id)
  return id_;
}
inline void GCodeLayer::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Cura.GCodeLayer.id)
}

// bytes data = 2;
inline void GCodeLayer::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GCodeLayer::data() const {
  // @@protoc_insertion_point(field_get:Cura.GCodeLayer.data)
  return data_.GetNoArena();
}
inline void GCodeLayer::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cura.GCodeLayer.data)
}
#if LANG_CXX11
inline void GCodeLayer::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cura.GCodeLayer.data)
}
#endif
inline void GCodeLayer::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cura.GCodeLayer.data)
}
inline void GCodeLayer::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cura.GCodeLayer.data)
}
inline ::std::string* GCodeLayer::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Cura.GCodeLayer.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GCodeLayer::release_data() {
  // @@protoc_insertion_point(field_release:Cura.GCodeLayer.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GCodeLayer::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Cura.GCodeLayer.data)
}

// -------------------------------------------------------------------

// ObjectPrintTime

// int64 id = 1;
inline void ObjectPrintTime::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ObjectPrintTime::id() const {
  // @@protoc_insertion_point(field_get:Cura.ObjectPrintTime.id)
  return id_;
}
inline void ObjectPrintTime::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Cura.ObjectPrintTime.id)
}

// float time = 2;
inline void ObjectPrintTime::clear_time() {
  time_ = 0;
}
inline float ObjectPrintTime::time() const {
  // @@protoc_insertion_point(field_get:Cura.ObjectPrintTime.time)
  return time_;
}
inline void ObjectPrintTime::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:Cura.ObjectPrintTime.time)
}

// float material_amount = 3;
inline void ObjectPrintTime::clear_material_amount() {
  material_amount_ = 0;
}
inline float ObjectPrintTime::material_amount() const {
  // @@protoc_insertion_point(field_get:Cura.ObjectPrintTime.material_amount)
  return material_amount_;
}
inline void ObjectPrintTime::set_material_amount(float value) {
  
  material_amount_ = value;
  // @@protoc_insertion_point(field_set:Cura.ObjectPrintTime.material_amount)
}

// -------------------------------------------------------------------

// SettingList

// repeated .Cura.Setting settings = 1;
inline int SettingList::settings_size() const {
  return settings_.size();
}
inline void SettingList::clear_settings() {
  settings_.Clear();
}
inline const ::Cura::Setting& SettingList::settings(int index) const {
  // @@protoc_insertion_point(field_get:Cura.SettingList.settings)
  return settings_.Get(index);
}
inline ::Cura::Setting* SettingList::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:Cura.SettingList.settings)
  return settings_.Mutable(index);
}
inline ::Cura::Setting* SettingList::add_settings() {
  // @@protoc_insertion_point(field_add:Cura.SettingList.settings)
  return settings_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Cura::Setting >*
SettingList::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:Cura.SettingList.settings)
  return &settings_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Cura::Setting >&
SettingList::settings() const {
  // @@protoc_insertion_point(field_list:Cura.SettingList.settings)
  return settings_;
}

// -------------------------------------------------------------------

// Setting

// string name = 1;
inline void Setting::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Setting::name() const {
  // @@protoc_insertion_point(field_get:Cura.Setting.name)
  return name_.GetNoArena();
}
inline void Setting::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cura.Setting.name)
}
#if LANG_CXX11
inline void Setting::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cura.Setting.name)
}
#endif
inline void Setting::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cura.Setting.name)
}
inline void Setting::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cura.Setting.name)
}
inline ::std::string* Setting::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Cura.Setting.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Setting::release_name() {
  // @@protoc_insertion_point(field_release:Cura.Setting.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Cura.Setting.name)
}

// bytes value = 2;
inline void Setting::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Setting::value() const {
  // @@protoc_insertion_point(field_get:Cura.Setting.value)
  return value_.GetNoArena();
}
inline void Setting::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cura.Setting.value)
}
#if LANG_CXX11
inline void Setting::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cura.Setting.value)
}
#endif
inline void Setting::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cura.Setting.value)
}
inline void Setting::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cura.Setting.value)
}
inline ::std::string* Setting::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:Cura.Setting.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Setting::release_value() {
  // @@protoc_insertion_point(field_release:Cura.Setting.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Cura.Setting.value)
}

// -------------------------------------------------------------------

// GCodePrefix

// bytes data = 2;
inline void GCodePrefix::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GCodePrefix::data() const {
  // @@protoc_insertion_point(field_get:Cura.GCodePrefix.data)
  return data_.GetNoArena();
}
inline void GCodePrefix::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cura.GCodePrefix.data)
}
#if LANG_CXX11
inline void GCodePrefix::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cura.GCodePrefix.data)
}
#endif
inline void GCodePrefix::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cura.GCodePrefix.data)
}
inline void GCodePrefix::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cura.GCodePrefix.data)
}
inline ::std::string* GCodePrefix::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Cura.GCodePrefix.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GCodePrefix::release_data() {
  // @@protoc_insertion_point(field_release:Cura.GCodePrefix.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GCodePrefix::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Cura.GCodePrefix.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Cura

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cura::Polygon_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cura::Polygon_Type>() {
  return ::Cura::Polygon_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Cura_2eproto__INCLUDED
